#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2010-2012 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# In addition, as a special exception, the copyright holders give
# permission to link the code of portions of this program with the
# OpenSSL library under certain conditions as described in each
# individual source file, and distribute linked combinations
# including the two.
# You must obey the GNU General Public License in all respects
# for all of the code used other than OpenSSL.  If you modify
# file(s) with this exception, you may extend this exception to your
# version of the file(s), but you are not obligated to do so.  If you
# do not wish to do so, delete this exception statement from your
# version.  If you delete this exception statement from all source
# files in the program, then also delete it here.
"""The script tu run the Login D-Bus service."""

# Invalid name "ubuntuone-login"

import logging
import os
import sys

import dbus.mainloop.glib
import dbus.service

from gi.repository import GLib
from ubuntuone.logger import basic_formatter
from ubuntuone.platform.credentials import logger
from ubuntuone.platform.credentials.dbus_service import (
    DBUS_BUS_NAME, DBUS_CREDENTIALS_PATH,
    CredentialsManagement,
)

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)


if __name__ == "__main__":
    # Register DBus service for making sure we run only one instance
    try:
        bus = dbus.SessionBus()
        name = bus.request_name(DBUS_BUS_NAME,
                                dbus.bus.NAME_FLAG_DO_NOT_QUEUE)
        if name == dbus.bus.REQUEST_NAME_REPLY_EXISTS:
            logger.error(Login manager already running, quitting.")
            sys.exit(0)
    except dbus.DBusException:
        pass
    else:
        if os.environ.get('U1_DEBUG'):
            debug_handler = logging.StreamHandler(sys.stderr)
            debug_handler.setFormatter(basic_formatter)
            debug_handler.setLevel(logging.DEBUG)
            logger.setLevel(logging.DEBUG)
            logger.addHandler(debug_handler)

        logger.info("Starting login manager for bus %r.",
                    DBUS_BUS_NAME)
        bus_name = dbus.service.BusName(DBUS_BUS_NAME, bus=bus)
        mainloop = GLib.MainLoop()
        CredentialsManagement(timeout_func=GLib.timeout_add,
                              shutdown_func=mainloop.quit,
                              bus_name=bus_name,
                              object_path=DBUS_CREDENTIALS_PATH)

        mainloop.run()
